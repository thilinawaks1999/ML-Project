{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T06:35:37.661993Z\",\"iopub.execute_input\":\"2023-09-24T06:35:37.662493Z\",\"iopub.status.idle\":\"2023-09-24T06:35:38.120649Z\",\"shell.execute_reply.started\":\"2023-09-24T06:35:37.662442Z\",\"shell.execute_reply\":\"2023-09-24T06:35:38.119734Z\"}}\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T06:35:39.751970Z\",\"iopub.execute_input\":\"2023-09-24T06:35:39.752655Z\",\"iopub.status.idle\":\"2023-09-24T06:35:40.509164Z\",\"shell.execute_reply.started\":\"2023-09-24T06:35:39.752614Z\",\"shell.execute_reply\":\"2023-09-24T06:35:40.507996Z\"}}\nimport pandas as pd\nimport numpy as np\nfrom pandas import Series\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.decomposition import PCA\nfrom sklearn.metrics import f1_score\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T06:35:42.418785Z\",\"iopub.execute_input\":\"2023-09-24T06:35:42.420315Z\",\"iopub.status.idle\":\"2023-09-24T06:35:54.322790Z\",\"shell.execute_reply.started\":\"2023-09-24T06:35:42.420211Z\",\"shell.execute_reply\":\"2023-09-24T06:35:54.321508Z\"}}\ntrain_df = pd.read_csv('/kaggle/input/layer7/train.csv')\nvalid_df = pd.read_csv('/kaggle/input/layer7/valid.csv')\ntest_df = pd.read_csv('/kaggle/input/layer7/test.csv')\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T06:35:54.325210Z\",\"iopub.execute_input\":\"2023-09-24T06:35:54.325598Z\",\"iopub.status.idle\":\"2023-09-24T06:35:54.333860Z\",\"shell.execute_reply.started\":\"2023-09-24T06:35:54.325565Z\",\"shell.execute_reply\":\"2023-09-24T06:35:54.332708Z\"}}\ntrain_df.shape\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T06:35:54.335744Z\",\"iopub.execute_input\":\"2023-09-24T06:35:54.336104Z\",\"iopub.status.idle\":\"2023-09-24T06:35:54.388703Z\",\"shell.execute_reply.started\":\"2023-09-24T06:35:54.336073Z\",\"shell.execute_reply\":\"2023-09-24T06:35:54.387774Z\"}}\ntrain_df.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T06:35:56.932938Z\",\"iopub.execute_input\":\"2023-09-24T06:35:56.933361Z\",\"iopub.status.idle\":\"2023-09-24T06:35:56.964968Z\",\"shell.execute_reply.started\":\"2023-09-24T06:35:56.933328Z\",\"shell.execute_reply\":\"2023-09-24T06:35:56.963908Z\"}}\nmissing_columns = train_df.columns[train_df.isnull().any()]\nmissing_counts = train_df[missing_columns].isnull().sum()\n\nprint('Missing Columns and Counts')\nfor column in missing_columns:\n    print( str(column) +' : '+ str(missing_counts[column]))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T06:35:59.198908Z\",\"iopub.execute_input\":\"2023-09-24T06:35:59.200052Z\",\"iopub.status.idle\":\"2023-09-24T06:35:59.279683Z\",\"shell.execute_reply.started\":\"2023-09-24T06:35:59.199999Z\",\"shell.execute_reply\":\"2023-09-24T06:35:59.278549Z\"}}\ntrain_data = train_df.copy()\nvalid_data = valid_df.copy()\ntest_data = test_df.copy()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T06:36:01.293532Z\",\"iopub.execute_input\":\"2023-09-24T06:36:01.294003Z\",\"iopub.status.idle\":\"2023-09-24T06:36:04.124401Z\",\"shell.execute_reply.started\":\"2023-09-24T06:36:01.293970Z\",\"shell.execute_reply\":\"2023-09-24T06:36:04.123174Z\"}}\ntrain_df.describe()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T06:36:06.499279Z\",\"iopub.execute_input\":\"2023-09-24T06:36:06.499739Z\",\"iopub.status.idle\":\"2023-09-24T06:36:11.429776Z\",\"shell.execute_reply.started\":\"2023-09-24T06:36:06.499703Z\",\"shell.execute_reply\":\"2023-09-24T06:36:11.428432Z\"}}\nfrom sklearn.preprocessing import RobustScaler # eliminate outliers\n\nx_train = {}\nx_valid = {}\nx_test = {}\n\ny_train = {}\ny_valid = {}\ny_test = {}\n\n#create dictionaries for each label\nfor target_label in ['label_1','label_2','label_3','label_4']:\n\n  if target_label == \"label_2\":\n    train = train_df[train_df['label_2'].notna()]\n    valid = valid_df[valid_df['label_2'].notna()]\n  else:\n    train = train_df\n    valid = valid_df\n\n  test = test_df\n\n  scaler = RobustScaler()\n\n  x_train[target_label] = pd.DataFrame(scaler.fit_transform(train.drop(['label_1','label_2','label_3','label_4'], axis=1)), columns=[f'feature_{i}' for i in range(1,769)])\n  y_train[target_label] = train[target_label]\n\n  x_valid[target_label] = pd.DataFrame(scaler.transform(valid.drop(['label_1','label_2','label_3','label_4'], axis=1)), columns=[f'feature_{i}' for i in range(1,769)])\n  y_valid  [target_label] = valid[target_label]\n\n  x_test[target_label] = pd.DataFrame(scaler.transform(test.drop([\"ID\"],axis=1)), columns=[f'feature_{i}' for i in range(1,769)])\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T06:36:15.701423Z\",\"iopub.execute_input\":\"2023-09-24T06:36:15.701873Z\",\"iopub.status.idle\":\"2023-09-24T06:36:15.833932Z\",\"shell.execute_reply.started\":\"2023-09-24T06:36:15.701838Z\",\"shell.execute_reply\":\"2023-09-24T06:36:15.832648Z\"}}\nx_train_df = x_train['label_1'].copy()\ny_train_df = y_train['label_1'].copy()\n\nx_valid_df = x_valid['label_1'].copy()\ny_valid_df = y_valid['label_1'].copy()\n\nx_test_df = x_test['label_1'].copy()\n\n# %% [markdown]\n# # Cross Validation\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-23T18:10:32.538905Z\",\"iopub.execute_input\":\"2023-09-23T18:10:32.539979Z\",\"iopub.status.idle\":\"2023-09-23T18:29:38.349846Z\",\"shell.execute_reply.started\":\"2023-09-23T18:10:32.539949Z\",\"shell.execute_reply\":\"2023-09-23T18:29:38.348873Z\"}}\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import cross_val_score, KFold\n\n# Perform cross-validation\nscores = cross_val_score(SVC(), x_train_df, y_train_df, cv=5, scoring='accuracy')\n\nmean_accuracy = scores.mean()\nstd_accuracy = scores.std()\n# Print the cross-validation scores\nprint('Support Vector Machines')\nprint('\\n')\nprint(\"Cross-validation scores:\", scores)\nprint(f\"Mean Accuracy: {mean_accuracy:.2f}\")\nprint(f\"Standard Deviation: {std_accuracy:.2f}\")\n\n# %% [markdown]\n# # Feature Engineering\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T06:36:34.712321Z\",\"iopub.execute_input\":\"2023-09-24T06:36:34.716473Z\",\"iopub.status.idle\":\"2023-09-24T06:36:39.147321Z\",\"shell.execute_reply.started\":\"2023-09-24T06:36:34.716407Z\",\"shell.execute_reply\":\"2023-09-24T06:36:39.145803Z\"}}\nfrom sklearn.decomposition import PCA\n\npca = PCA(n_components=0.975, svd_solver='full')\npca.fit(x_train_df)\nx_train_df_pca = pd.DataFrame(pca.transform(x_train_df))\nx_valid_df_pca = pd.DataFrame(pca.transform(x_valid_df))\nx_test_df_pca = pd.DataFrame(pca.transform(x_test_df))\nprint('Shape after PCA: ',x_train_df_pca.shape)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T06:38:56.469149Z\",\"iopub.execute_input\":\"2023-09-24T06:38:56.469969Z\",\"iopub.status.idle\":\"2023-09-24T06:38:56.476047Z\",\"shell.execute_reply.started\":\"2023-09-24T06:38:56.469927Z\",\"shell.execute_reply\":\"2023-09-24T06:38:56.474547Z\"}}\nfrom sklearn import metrics\n\n# %% [markdown]\n# # SVM\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-23T18:29:41.931161Z\",\"iopub.execute_input\":\"2023-09-23T18:29:41.931881Z\",\"iopub.status.idle\":\"2023-09-23T18:30:17.138289Z\",\"shell.execute_reply.started\":\"2023-09-23T18:29:41.931841Z\",\"shell.execute_reply\":\"2023-09-23T18:30:17.136934Z\"}}\nfrom sklearn import svm\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n\nclassifier = svm.SVC(kernel='linear', C=1)\n\nclassifier.fit(x_train_df_pca, y_train_df)\n\ny_valid_pred = classifier.predict(x_valid_df_pca)\n\nprint(\"acc_score: \",metrics.accuracy_score(y_valid_df, y_valid_pred))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-23T18:30:17.139851Z\",\"iopub.execute_input\":\"2023-09-23T18:30:17.140634Z\",\"iopub.status.idle\":\"2023-09-23T19:08:21.619789Z\",\"shell.execute_reply.started\":\"2023-09-23T18:30:17.140593Z\",\"shell.execute_reply\":\"2023-09-23T19:08:21.618045Z\"}}\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import uniform, randint\nimport numpy as np\n\nparam_dist = {\n    'C': [100,10,1,0,0.1,0.01],\n    'kernel': ['rbf','linear','poly','sigmoid'],\n    'gamma': ['scale','auto'],\n    'degree': [1,2,3,4],\n    'class_weight' : ['none','balanced']\n}\n\nsvm = SVC()\n\nrandom_search = RandomizedSearchCV(\n    svm, param_distributions=param_dist, n_iter=10, cv=5, n_jobs=-1, random_state=42, scoring='accuracy'\n)\n\nrandom_search.fit(x_train_df_pca, y_train_df)\n\nbest_params = random_search.best_params_\nbest_model = random_search.best_estimator_\n\nprint(\"best parameters:\", best_params)\n\n# %% [markdown]\n# Label 1 \n# best parameters: {'kernel': 'rbf', 'gamma': 'scale', 'degree': 4, 'class_weight': 'balanced', 'C': 100}\n# \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T06:39:06.506854Z\",\"iopub.execute_input\":\"2023-09-24T06:39:06.507363Z\",\"iopub.status.idle\":\"2023-09-24T06:41:12.117914Z\",\"shell.execute_reply.started\":\"2023-09-24T06:39:06.507326Z\",\"shell.execute_reply\":\"2023-09-24T06:41:12.116751Z\"}}\nfrom sklearn import svm\n\nclassifier = svm.SVC(kernel='rbf', C=100, gamma='scale', degree=4, class_weight='balanced')\n\nclassifier.fit(x_train_df_pca, y_train_df)\n\ny_valid_pred = classifier.predict(x_valid_df_pca)\n\nprint(\"acc_score: \",metrics.accuracy_score(y_valid_df, y_valid_pred))\n\ny_test_predict_after_pca = classifier.predict(x_test_df_pca)\n\n\n\n# %% [markdown]\n# # RandomForest\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T06:45:48.056926Z\",\"iopub.execute_input\":\"2023-09-24T06:45:48.057417Z\",\"iopub.status.idle\":\"2023-09-24T06:49:28.495043Z\",\"shell.execute_reply.started\":\"2023-09-24T06:45:48.057384Z\",\"shell.execute_reply\":\"2023-09-24T06:49:28.493587Z\"}}\nfrom sklearn.ensemble import RandomForestClassifier\n\nclassifier = RandomForestClassifier(n_estimators=100, random_state=42)\n\nclassifier.fit(x_train_df, y_train_df)\n\ny_valid_pred = classifier.predict(x_valid_df)\n\nprint(\"accuracy_score: \",metrics.accuracy_score(y_valid_df, y_valid_pred))\n\ny_test_pred = classifier.predict(x_test_df)\n\n# %% [markdown]\n# # CSV Creation\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T07:12:18.368585Z\",\"iopub.execute_input\":\"2023-09-24T07:12:18.368974Z\",\"iopub.status.idle\":\"2023-09-24T07:12:18.376403Z\",\"shell.execute_reply.started\":\"2023-09-24T07:12:18.368944Z\",\"shell.execute_reply\":\"2023-09-24T07:12:18.375292Z\"}}\noutput_df=pd.DataFrame(columns=[\"ID\",\"label_1\",\"label_2\",\"label_3\",\"label_4\"])\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T07:16:00.121541Z\",\"iopub.execute_input\":\"2023-09-24T07:16:00.121935Z\",\"iopub.status.idle\":\"2023-09-24T07:16:00.130932Z\",\"shell.execute_reply.started\":\"2023-09-24T07:16:00.121905Z\",\"shell.execute_reply\":\"2023-09-24T07:16:00.129465Z\"}}\nIDs = list(i for i in range(1, len(test_df)+1))\noutput_df[\"ID\"] = IDs\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T07:17:13.321995Z\",\"iopub.execute_input\":\"2023-09-24T07:17:13.322417Z\",\"iopub.status.idle\":\"2023-09-24T07:17:13.327745Z\",\"shell.execute_reply.started\":\"2023-09-24T07:17:13.322385Z\",\"shell.execute_reply\":\"2023-09-24T07:17:13.326694Z\"}}\noutput_df[\"label_1\"] = y_test_predict_after_pca\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T07:17:19.285283Z\",\"iopub.execute_input\":\"2023-09-24T07:17:19.285689Z\",\"iopub.status.idle\":\"2023-09-24T07:17:19.301756Z\",\"shell.execute_reply.started\":\"2023-09-24T07:17:19.285657Z\",\"shell.execute_reply\":\"2023-09-24T07:17:19.300579Z\"}}\noutput_df\n\n# %% [code]\noutput_df.to_csv('/kaggle/working/output7_1.csv',index=False)","metadata":{"_uuid":"10de1de2-aae5-48e9-a4b0-5d058ec4493b","_cell_guid":"a02d2da5-c33e-4440-8127-7b2288b5f2ec","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}