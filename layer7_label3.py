{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T08:59:49.093632Z\",\"iopub.execute_input\":\"2023-09-24T08:59:49.094302Z\",\"iopub.status.idle\":\"2023-09-24T08:59:49.548563Z\",\"shell.execute_reply.started\":\"2023-09-24T08:59:49.094258Z\",\"shell.execute_reply\":\"2023-09-24T08:59:49.545787Z\"}}\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T08:59:49.550599Z\",\"iopub.execute_input\":\"2023-09-24T08:59:49.551112Z\",\"iopub.status.idle\":\"2023-09-24T08:59:52.113863Z\",\"shell.execute_reply.started\":\"2023-09-24T08:59:49.551078Z\",\"shell.execute_reply\":\"2023-09-24T08:59:52.112510Z\"}}\nimport pandas as pd\nimport numpy as np\nfrom pandas import Series\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.decomposition import PCA\nfrom sklearn.metrics import f1_score\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T08:59:52.115380Z\",\"iopub.execute_input\":\"2023-09-24T08:59:52.116057Z\",\"iopub.status.idle\":\"2023-09-24T09:00:04.931887Z\",\"shell.execute_reply.started\":\"2023-09-24T08:59:52.116016Z\",\"shell.execute_reply\":\"2023-09-24T09:00:04.930575Z\"}}\ntrain_df = pd.read_csv('/kaggle/input/layer7/train.csv')\nvalid_df = pd.read_csv('/kaggle/input/layer7/valid.csv')\ntest_df = pd.read_csv('/kaggle/input/layer7/test.csv')\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T09:00:04.934329Z\",\"iopub.execute_input\":\"2023-09-24T09:00:04.934680Z\",\"iopub.status.idle\":\"2023-09-24T09:00:04.944332Z\",\"shell.execute_reply.started\":\"2023-09-24T09:00:04.934651Z\",\"shell.execute_reply\":\"2023-09-24T09:00:04.941768Z\"}}\ntrain_df.shape\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T09:00:04.945642Z\",\"iopub.execute_input\":\"2023-09-24T09:00:04.946494Z\",\"iopub.status.idle\":\"2023-09-24T09:00:05.005021Z\",\"shell.execute_reply.started\":\"2023-09-24T09:00:04.946452Z\",\"shell.execute_reply\":\"2023-09-24T09:00:05.003911Z\"}}\ntrain_df.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T09:00:05.006347Z\",\"iopub.execute_input\":\"2023-09-24T09:00:05.007215Z\",\"iopub.status.idle\":\"2023-09-24T09:00:05.041195Z\",\"shell.execute_reply.started\":\"2023-09-24T09:00:05.007184Z\",\"shell.execute_reply\":\"2023-09-24T09:00:05.040035Z\"}}\nmissing_columns = train_df.columns[train_df.isnull().any()]\nmissing_counts = train_df[missing_columns].isnull().sum()\n\nprint('Missing Columns and Counts')\nfor column in missing_columns:\n    print( str(column) +' : '+ str(missing_counts[column]))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T09:00:05.042904Z\",\"iopub.execute_input\":\"2023-09-24T09:00:05.043245Z\",\"iopub.status.idle\":\"2023-09-24T09:00:05.121863Z\",\"shell.execute_reply.started\":\"2023-09-24T09:00:05.043216Z\",\"shell.execute_reply\":\"2023-09-24T09:00:05.120637Z\"}}\ntrain_data = train_df.copy()\nvalid_data = valid_df.copy()\ntest_data = test_df.copy()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T09:00:05.123211Z\",\"iopub.execute_input\":\"2023-09-24T09:00:05.123567Z\",\"iopub.status.idle\":\"2023-09-24T09:00:07.882767Z\",\"shell.execute_reply.started\":\"2023-09-24T09:00:05.123530Z\",\"shell.execute_reply\":\"2023-09-24T09:00:07.881649Z\"}}\ntrain_df.describe()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T09:00:07.884069Z\",\"iopub.execute_input\":\"2023-09-24T09:00:07.884437Z\",\"iopub.status.idle\":\"2023-09-24T09:00:12.895126Z\",\"shell.execute_reply.started\":\"2023-09-24T09:00:07.884391Z\",\"shell.execute_reply\":\"2023-09-24T09:00:12.893795Z\"}}\nfrom sklearn.preprocessing import RobustScaler # eliminate outliers\n\nx_train = {}\nx_valid = {}\nx_test = {}\n\ny_train = {}\ny_valid = {}\ny_test = {}\n\n#create dictionaries for each label\nfor target_label in ['label_1','label_2','label_3','label_4']:\n\n  if target_label == \"label_2\":\n    train = train_df[train_df['label_2'].notna()]\n    valid = valid_df[valid_df['label_2'].notna()]\n  else:\n    train = train_df\n    valid = valid_df\n\n  test = test_df\n\n  scaler = RobustScaler()\n\n  x_train[target_label] = pd.DataFrame(scaler.fit_transform(train.drop(['label_1','label_2','label_3','label_4'], axis=1)), columns=[f'feature_{i}' for i in range(1,769)])\n  y_train[target_label] = train[target_label]\n\n  x_valid[target_label] = pd.DataFrame(scaler.transform(valid.drop(['label_1','label_2','label_3','label_4'], axis=1)), columns=[f'feature_{i}' for i in range(1,769)])\n  y_valid  [target_label] = valid[target_label]\n\n  x_test[target_label] = pd.DataFrame(scaler.transform(test.drop([\"ID\"],axis=1)), columns=[f'feature_{i}' for i in range(1,769)])\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T09:00:12.899354Z\",\"iopub.execute_input\":\"2023-09-24T09:00:12.899728Z\",\"iopub.status.idle\":\"2023-09-24T09:00:12.979012Z\",\"shell.execute_reply.started\":\"2023-09-24T09:00:12.899687Z\",\"shell.execute_reply\":\"2023-09-24T09:00:12.977958Z\"}}\nx_train_df = x_train['label_3'].copy()\ny_train_df = y_train['label_3'].copy()\n\nx_valid_df = x_valid['label_3'].copy()\ny_valid_df = y_valid['label_3'].copy()\n\nx_test_df = x_test['label_3'].copy()\n\n# %% [markdown]\n# # Cross Validation\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T09:00:12.980624Z\",\"iopub.execute_input\":\"2023-09-24T09:00:12.980986Z\",\"iopub.status.idle\":\"2023-09-24T09:05:06.728675Z\",\"shell.execute_reply.started\":\"2023-09-24T09:00:12.980958Z\",\"shell.execute_reply\":\"2023-09-24T09:05:06.726967Z\"}}\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import cross_val_score, KFold\n\n# Perform cross-validation\nscores = cross_val_score(SVC(), x_train_df, y_train_df, cv=5, scoring='accuracy')\n\nmean_accuracy = scores.mean()\nstd_accuracy = scores.std()\n# Print the cross-validation scores\nprint('Support Vector Machines')\nprint('\\n')\nprint(\"Cross-validation scores:\", scores)\nprint(f\"Mean Accuracy: {mean_accuracy:.2f}\")\nprint(f\"Standard Deviation: {std_accuracy:.2f}\")\n\n# %% [markdown]\n# # Feature Engineering\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T09:05:06.730488Z\",\"iopub.execute_input\":\"2023-09-24T09:05:06.730903Z\",\"iopub.status.idle\":\"2023-09-24T09:05:10.763175Z\",\"shell.execute_reply.started\":\"2023-09-24T09:05:06.730873Z\",\"shell.execute_reply\":\"2023-09-24T09:05:10.762042Z\"}}\nfrom sklearn.decomposition import PCA\n\npca = PCA(n_components=0.975, svd_solver='full')\npca.fit(x_train_df)\nx_train_df_pca = pd.DataFrame(pca.transform(x_train_df))\nx_valid_df_pca = pd.DataFrame(pca.transform(x_valid_df))\nx_test_df_pca = pd.DataFrame(pca.transform(x_test_df))\nprint('Shape after PCA: ',x_train_df_pca.shape)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T09:05:10.764914Z\",\"iopub.execute_input\":\"2023-09-24T09:05:10.765707Z\",\"iopub.status.idle\":\"2023-09-24T09:05:10.772506Z\",\"shell.execute_reply.started\":\"2023-09-24T09:05:10.765665Z\",\"shell.execute_reply\":\"2023-09-24T09:05:10.771012Z\"}}\nfrom sklearn import metrics\n\n# %% [markdown]\n# # SVM\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T09:05:10.774443Z\",\"iopub.execute_input\":\"2023-09-24T09:05:10.775848Z\",\"iopub.status.idle\":\"2023-09-24T09:05:19.428998Z\",\"shell.execute_reply.started\":\"2023-09-24T09:05:10.775807Z\",\"shell.execute_reply\":\"2023-09-24T09:05:19.427811Z\"}}\nfrom sklearn import svm\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n\nclassifier = svm.SVC(kernel='linear', C=1)\n\nclassifier.fit(x_train_df_pca, y_train_df)\n\ny_valid_pred = classifier.predict(x_valid_df_pca)\n\nprint(\"acc_score: \",metrics.accuracy_score(y_valid_df, y_valid_pred))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T09:05:19.430966Z\",\"iopub.execute_input\":\"2023-09-24T09:05:19.431412Z\",\"iopub.status.idle\":\"2023-09-24T09:33:33.751422Z\",\"shell.execute_reply.started\":\"2023-09-24T09:05:19.431371Z\",\"shell.execute_reply\":\"2023-09-24T09:33:33.749819Z\"}}\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import uniform, randint\nimport numpy as np\n\nparam_dist = {\n    'C': [100,10,1,0,0.1,0.01],\n    'kernel': ['rbf','linear','poly','sigmoid'],\n    'gamma': ['scale','auto'],\n    'degree': [1,2,3,4],\n    'class_weight' : ['none','balanced']\n}\n\nsvm = SVC()\n\nrandom_search = RandomizedSearchCV(\n    svm, param_distributions=param_dist, n_iter=10, cv=5, n_jobs=-1, random_state=42, scoring='accuracy'\n)\n\nrandom_search.fit(x_train_df_pca, y_train_df)\n\nbest_params = random_search.best_params_\nbest_model = random_search.best_estimator_\n\nprint(\"best parameters:\", best_params)\n\n# %% [markdown]\n# Label 1 \n# best parameters: {'kernel': 'rbf', 'gamma': 'scale', 'degree': 4, 'class_weight': 'balanced', 'C': 100}\n# \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T09:43:20.024998Z\",\"iopub.execute_input\":\"2023-09-24T09:43:20.025406Z\",\"iopub.status.idle\":\"2023-09-24T09:44:17.908578Z\",\"shell.execute_reply.started\":\"2023-09-24T09:43:20.025377Z\",\"shell.execute_reply\":\"2023-09-24T09:44:17.907053Z\"}}\nfrom sklearn import svm\n\nclassifier = svm.SVC(kernel=best_params['kernel'], C=best_params['C'], gamma=best_params['gamma'], degree=best_params['degree'], class_weight=best_params['class_weight'])\n\nclassifier.fit(x_train_df_pca, y_train_df)\n\ny_valid_pred = classifier.predict(x_valid_df_pca)\n\nprint(\"acc_score: \",metrics.accuracy_score(y_valid_df, y_valid_pred))\n\ny_test_predict_after_pca = classifier.predict(x_test_df_pca)\n\n\n\n# %% [markdown]\n# # RandomForest\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T09:34:31.550903Z\",\"iopub.execute_input\":\"2023-09-24T09:34:31.551304Z\",\"iopub.status.idle\":\"2023-09-24T09:36:35.751928Z\",\"shell.execute_reply.started\":\"2023-09-24T09:34:31.551272Z\",\"shell.execute_reply\":\"2023-09-24T09:36:35.750442Z\"}}\nfrom sklearn.ensemble import RandomForestClassifier\n\nclassifier = RandomForestClassifier(n_estimators=100, random_state=42)\n\nclassifier.fit(x_train_df, y_train_df)\n\ny_valid_pred = classifier.predict(x_valid_df)\n\nprint(\"accuracy_score: \",metrics.accuracy_score(y_valid_df, y_valid_pred))\n\ny_test_pred = classifier.predict(x_test_df)\n\n# %% [markdown]\n# # CSV Creation\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T09:36:35.753262Z\",\"iopub.execute_input\":\"2023-09-24T09:36:35.753600Z\",\"iopub.status.idle\":\"2023-09-24T09:36:35.762686Z\",\"shell.execute_reply.started\":\"2023-09-24T09:36:35.753572Z\",\"shell.execute_reply\":\"2023-09-24T09:36:35.761245Z\"}}\noutput_df=pd.DataFrame(columns=[\"ID\",\"label_1\",\"label_2\",\"label_3\",\"label_4\"])\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T09:36:35.764297Z\",\"iopub.execute_input\":\"2023-09-24T09:36:35.764793Z\",\"iopub.status.idle\":\"2023-09-24T09:36:35.782304Z\",\"shell.execute_reply.started\":\"2023-09-24T09:36:35.764749Z\",\"shell.execute_reply\":\"2023-09-24T09:36:35.781182Z\"}}\nIDs = list(i for i in range(1, len(test_df)+1))\noutput_df[\"ID\"] = IDs\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T09:36:35.784072Z\",\"iopub.execute_input\":\"2023-09-24T09:36:35.784567Z\",\"iopub.status.idle\":\"2023-09-24T09:36:35.795345Z\",\"shell.execute_reply.started\":\"2023-09-24T09:36:35.784526Z\",\"shell.execute_reply\":\"2023-09-24T09:36:35.794400Z\"}}\noutput_df[\"label_3\"] = y_test_predict_after_pca\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T09:36:35.796487Z\",\"iopub.execute_input\":\"2023-09-24T09:36:35.797440Z\",\"iopub.status.idle\":\"2023-09-24T09:36:35.822538Z\",\"shell.execute_reply.started\":\"2023-09-24T09:36:35.797409Z\",\"shell.execute_reply\":\"2023-09-24T09:36:35.821416Z\"}}\noutput_df\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-24T09:36:35.824507Z\",\"iopub.execute_input\":\"2023-09-24T09:36:35.824965Z\",\"iopub.status.idle\":\"2023-09-24T09:36:35.841703Z\",\"shell.execute_reply.started\":\"2023-09-24T09:36:35.824914Z\",\"shell.execute_reply\":\"2023-09-24T09:36:35.840821Z\"}}\noutput_df.to_csv('/kaggle/working/output7_3.csv',index=False)","metadata":{"_uuid":"c2ac7738-e896-4ea9-b44a-77438873f157","_cell_guid":"bef6bf0a-0176-4637-8df3-3b6cda56314c","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}